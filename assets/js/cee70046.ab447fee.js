"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1085],{4344:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var s=i(5893),t=i(1151);const r={},l="Input",d={id:"Form fields/input",title:"Input",description:"Description",source:"@site/docs/Form fields/input.md",sourceDirName:"Form fields",slug:"/Form fields/input",permalink:"/web-components/docs/Form fields/input",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"File upload",permalink:"/web-components/docs/Form fields/file-upload"},next:{title:"Multisearch",permalink:"/web-components/docs/Form fields/multisearch"}},o={},c=[{value:"Description",id:"description",level:3},{value:"Attributes",id:"attributes",level:3},{value:"Slots",id:"slots",level:3},{value:"Methods",id:"methods",level:3},{value:"Events",id:"events",level:3},{value:"Demo",id:"demo",level:3}];function a(e){const n={code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"input",children:"Input"}),"\n",(0,s.jsx)(n.h3,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<jp-input>"})," is a field component with ",(0,s.jsx)(n.code,{children:"<input>"})," functionality."]}),"\n",(0,s.jsx)(n.h3,{id:"attributes",children:"Attributes"}),"\n",(0,s.jsxs)(n.p,{children:["|          ",(0,s.jsx)(n.strong,{children:"Name"}),"          | ",(0,s.jsx)(n.strong,{children:"Required"})," |                                           ",(0,s.jsx)(n.strong,{children:"Type"}),"                                            |                                   ",(0,s.jsx)(n.strong,{children:"Description"}),"                                   |\n| :------------------------: | :----------: | :-------------------------------------------------------------------------------------------: | :---------------------------------------------------------------------------------: | ------------------------------------------- |\n|           label            |              |                                           ",(0,s.jsx)(n.code,{children:"string"}),"                                            |                            shows at the top of an input                             |\n|         labelType          |              |                                   ",(0,s.jsx)(n.code,{children:"'outside'"})," or ",(0,s.jsx)(n.code,{children:"'inside'"}),"                                   |                   whether label is inside or outside of the field                   |\n|        placeholder         |              |                                           ",(0,s.jsx)(n.code,{children:"string"}),"                                            | temporary text that appears in an ",(0,s.jsx)("br",{})," input field before any input is entered |\n|            name            |      \u2713       |                                           ",(0,s.jsx)(n.code,{children:"string"}),"                                            |                              name of the form control                               |\n|             id             |              |                                           ",(0,s.jsx)(n.code,{children:"string"}),"                                            |                                  unique identifier                                  |\n|          disabled          |              |                                           ",(0,s.jsx)(n.code,{children:"boolean"}),"                                           |                         determines if an input is disabled                          |\n|            list            |              |                                           ",(0,s.jsx)(n.code,{children:"string"}),"                                            |                     id of datalist (list of predefined values)                      |\n|            min             |              |                                           ",(0,s.jsx)(n.code,{children:"number"}),"                                            |                           minimal value on numeric input                            |\n|            max             |              |                                           ",(0,s.jsx)(n.code,{children:"number"}),"                                            |                           maximal value on numeric input                            |\n|            step            |              |                                           ",(0,s.jsx)(n.code,{children:"number"}),"                                            |                                       ",(0,s.jsx)(n.code,{children:"'any'"}),"                                       | number that specifies step on numeric input |\n|          required          |              |                                           ",(0,s.jsx)(n.code,{children:"boolean"}),"                                           |                         determines if an input is required                          |\n| requiredValidationMessage  |              |                                           ",(0,s.jsx)(n.code,{children:"string"}),"                                            |           validation message for when component does not satisfy required           |\n|          readonly          |              |                                           ",(0,s.jsx)(n.code,{children:"boolean"}),"                                           |                         determines if an input is read-only                         |\n|            type            |              | One of the following: ",(0,s.jsx)("br",{})," ",(0,s.jsx)(n.code,{children:"'text'"}),", ",(0,s.jsx)(n.code,{children:"'password'"}),", ",(0,s.jsx)("br",{})," ",(0,s.jsx)(n.code,{children:"'email'"}),", ",(0,s.jsx)(n.code,{children:"'tel'"}),", ",(0,s.jsx)(n.code,{children:"'url'"})," |                                    type of input                                    |\n|         minlength          |              |                                           ",(0,s.jsx)(n.code,{children:"number"}),"                                            |                           minimum character count allowed                           |\n| minlengthValidationMessage |              |                                           ",(0,s.jsx)(n.code,{children:"string"}),"                                            |          validation message for when component does not satisfy minlength           |\n|         maxlength          |              |                                           ",(0,s.jsx)(n.code,{children:"number"}),"                                            |                           maximum character count allowed                           |\n| maxlengthValidationMessage |              |                                           ",(0,s.jsx)(n.code,{children:"string"}),"                                            |          validation message for when component does not satisfy maxlength           |\n|          pattern           |              |                                           ",(0,s.jsx)(n.code,{children:"string"}),"                                            |                          pattern that input has to satisfy                          |\n|  patternValidationMessage  |              |                                           ",(0,s.jsx)(n.code,{children:"string"}),"                                            |           validation message for when component does not satisfy pattern            |\n|     validationMessages     |              |                          ",(0,s.jsx)(n.code,{children:"{[type]: string}"})," where ",(0,s.jsx)(n.code,{children:"type"})," is ",(0,s.jsx)(n.code,{children:"string"}),"                          |          compact way of writing validation messages in a single attribute           |"]}),"\n",(0,s.jsx)(n.h3,{id:"slots",children:"Slots"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"hint"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"renders below the input field"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prefix"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"renders in front of the input field"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"suffix"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"renders after the input field"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"getValue"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"returns form field value"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"reportValidity"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"triggers reportValidity"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"value"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"triggers when value of the field changes"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"demo",children:"Demo"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:'<jp-input label="Input"></jp-input>\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>l});var s=i(7294);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);